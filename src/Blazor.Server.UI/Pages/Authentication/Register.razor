@page "/pages/authentication/register"
@using System.Text.RegularExpressions
@using CleanArchitecture.Blazor.Application.Common.Security
@using CleanArchitecture.Blazor.Infrastructure.Constants.Role
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using FluentValidation;
@inject IStringLocalizer<Register> L
@attribute [AllowAnonymous]

<AuthorizeView>
    <NotAuthorized Context="Auth">
        <MudForm Model="@_model" @ref="@_form" Validation="@(registerValidator.ValidateValue)">
            <MudText Typo="Typo.h4" GutterBottom="true">@L["Sign Up"]</MudText>
            <MudText>@L["have an account?"] <MudLink Href="/pages/authentication/login">@L["Sign In"]</MudLink></MudText>

            <MudTextField T="string"
                          Immediate="true"
                          Label="@L["User Name"]"
                          @bind-Value="_model.UserName"
                          For="@(() => _model.UserName)"
                          Variant="Variant.Outlined"
                          Required="true"
                          RequiredError="@L["user name is required!"]"
                          Class="my-4"></MudTextField>

            <MudTextField T="string"
                          Immediate="true"
                          Label="@L["E-mail"]"
                          @bind-Value="_model.Email"
                          For="@(() => _model.Email)"
                          Required="true"
                          RequiredError="@L["e-mail is required!"]"
                          Variant="Variant.Outlined"></MudTextField>

            <MudTextField Immediate="true"
                          Label="@L["Password"]"
                          @bind-Value="_model.Password"
                          For="@(() => _model.Password)"
                          Variant="Variant.Outlined"
                          InputType="@_passwordInput"
                          Adornment="Adornment.End"
                          AdornmentIcon="@_passwordInputIcon"
                          Required="true"
                          RequiredError="@L["password is required!"]"
                          OnAdornmentClick="TogglePasswordVisibility" Class="mt-4" />
            <MudTextField Immediate="true"
                          Label="@L["Confirm Password"]"
                          @bind-Value="_model.ConfirmPassword"
                          For="@(() => _model.ConfirmPassword)"
                          Variant="Variant.Outlined"
                          InputType="@_passwordInput"
                          Adornment="Adornment.End"
                          AdornmentIcon="@_passwordInputIcon"
                          Required="true"
                          RequiredError="@L["password is required!"]"
                          OnAdornmentClick="TogglePasswordVisibility" Class="mt-4" />

            <MudCheckBox For="@(() => _model.AgreeToTerms)" @bind-Checked="@_model.AgreeToTerms" Label="@L["I agree to the terms and privacy"]" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Disabled="@(!_model.AgreeToTerms)"
                       Size="Size.Large"
                       OnClick="@(async () => await Submit())"
                       FullWidth="true">@L["Register"]</MudButton>
        </MudForm>
    </NotAuthorized>
    <Authorized>
        <RedirectToHome></RedirectToHome>
        <MudAlert Severity="MudBlazor.Severity.Info" Class="mt-8 mud-width-full" Style="max-width:500px;">@L["You are already logged in."]</MudAlert>
    </Authorized>
</AuthorizeView>


@code {
    [Inject] private NavigationManager _navigation { get; set; } = default!;
    [Inject] private UserManager<ApplicationUser> _userManager { get; set; } = default!;
    MudForm _form=null!;
    RegisterFormModel _model = new();
    [Inject] private RegisterFormModelFluentValidator registerValidator { get; set; } = default!;


    bool _passwordVisibility;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }
    private async Task Submit()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            var user = new ApplicationUser()
                {
                    UserName = _model.UserName,
                    Email = _model.Email
                };
            var result = await _userManager.CreateAsync(user, _model.Password);
            if (result.Succeeded)
            {
                await _userManager.AddToRoleAsync(user, RoleConstants.BasicRole);
                _navigation.NavigateTo("/pages/authentication/login");
                Snackbar.Add(L["Register successfully!"], MudBlazor.Severity.Info);
            }
            else
            {
                Snackbar.Add($"{string.Join(",", result.Errors.Select(x => x.Description))}", MudBlazor.Severity.Error);
            }

        }
    }
}
